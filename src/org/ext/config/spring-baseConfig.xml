<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd
                     http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                     http://www.springframework.org/schema/mvc
                     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
                     
	<context:annotation-config></context:annotation-config>
	<!-- 扫描 -->
	<context:component-scan base-package="hx"></context:component-scan> 
	 <!-- JDBC参数配置 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="true">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:org/ext/config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass"
			value="${jdbc.driver}">
		</property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!--连接池中保留的最小连接数。-->
        <property name="minPoolSize">
            <value>${c3p0.minPoolSize}</value>
        </property>
 
 		<!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize">
            <value>${c3p0.maxPoolSize}</value>
        </property>
 
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize">
            <value>${c3p0.initialPoolSize}</value>
        </property>
 
 		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime">
            <value>${c3p0.maxIdleTime}</value>
        </property>
 
 		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement">
            <value>${c3p0.acquireIncrement}</value>
        </property>
        
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
 			 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
  			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements">
            <value>${c3p0.maxStatements}</value>
        </property>
 
	   <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod">
            <value>${c3p0.idleConnectionTestPeriod}</value>
        </property>
 
 		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts">
            <value>${c3p0.acquireRetryAttempts}</value>
        </property>
 
 		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
  			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
 			获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure">
            <value>${c3p0.breakAfterAcquireFailure}</value>
        </property>
 
 		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
  			 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
  			 等方法来提升连接测试的性能。Default: false
         -->
        <property name="testConnectionOnCheckout">
            <value>${c3p0.testConnectionOnCheckout}</value>
        </property>
	</bean>
	
	<!-- 配置 sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<property name="configLocation">
			<value>classpath:config/hibernate/hibernate.cfg.xml</value>
		</property>
		
		<property name="mappingResources">
			<list>
				<value>config/hibernate/hbm/User.hbm.xml</value>
				<value>config/hibernate/hbm/TestPaper.hbm.xml</value>
				<value>config/hibernate/hbm/ExamTopic.hbm.xml</value>
				<value>config/hibernate/hbm/TestQuestion.hbm.xml</value>
				<value>config/hibernate/hbm/SelectOption.hbm.xml</value>
				<value>config/hibernate/hbm/Answer.hbm.xml</value>
				<value>config/hibernate/hbm/ExamManage.hbm.xml</value>
				<value>config/hibernate/hbm/Score.hbm.xml</value>
				<value>config/hibernate/hbm/school/School.hbm.xml</value>
			</list>
		</property>
		
		<property name="hibernateProperties">
			<value>
			    hibernate.dialect=${hibernate.dialect}
				hibernate.hbm2ddl.auto=update
				hibernate.show_sql=true
			</value>
		</property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="dataSource"><ref local="dataSource" /></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	  <tx:attributes>
	     <tx:method name="save*" propagation="REQUIRED"/>
	     <tx:method name="delete*" propagation="REQUIRED"/>
	     <tx:method name="update*" propagation="REQUIRED"/>
	     <tx:method name="merge*" propagation="REQUIRED"/>
	  </tx:attributes>
	</tx:advice>
	
	<aop:config>
	   <aop:pointcut expression="execution(* hx.dao.*.*(..))" id="bussinessService"/>
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="bussinessService"/>
	</aop:config>
	
</beans>
